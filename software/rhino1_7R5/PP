/***
 * @Name Bizcloud:ADRelease:Test
 * @Type Script
 * @Description Minion based tests to verify the AD and DNS release functionality works correctly in the cloud plugin. 
 *
 */


/*
	Minion allows access to Agility assets (objects) and
	other Java code through a Javascript interface.

	The project is described at the following URL:

	http://servicemesh.github.io/minion/jsdoc/

	Minion is an OsgiCommandSupport object which is packaged in a OSGI bundle. 
	This means that minion can be started from the karaf shell and has access to
	resources (classes) from other bundles via configuration.

	The purpose of this file is to provide a test to see if the release of an instance
	results in the release of its DNS and Active Directory (AD) records.  The test
	creates and deploys a blueprint and then stops and releases the resultant topology.
	A test is made to ensure the DNS and AD records are not deleted at stop but only
	after release of the topology.

	The other purpose of this file is to demonstrate features of Minion and also to
	show how Agility works at a high level. There will be future tutorials which 
	go deeper into both products.	

	THIS CODE NEEDS MUCH IMPROVEMENT PERFECT CODE WAS NOT THE MOTIVATION FOR THE EXERCISE.
	ALSO CREATING A LIBRARY THAT CAN BE REUSED IN MANY TESTS IS AN OBVIOUS GOAL.
	
	This test does not pull the VM from the store.

	The test starts with the runTest() method at the bottom of the file.
*/

//this code is dependent (requires) the Minion platform
importScript("Minion");

var agilityIpAndPort = "localhost:8443";

/**** UTILITY METHODS ****/
function valIsNotDefined(val)
{
        if (val == undefined) {
                return true;
        }

        if (val == null) {
                return true;
        }

        if (!val) {
                return true;
        }
}

function valIsDefined(val)
{
        return !valIsNotDefined(val);
}


/**** FIND AGILITY ASSET METHODS ******/

function findBlueprintIdByName(name)
{
	//This uses GSON (https://github.com/google/gson) under the covers
        var blueprintArray = minion.$('$..blueprints[?(@.name==\"' + blueprintName + '\")]');
	if (blueprintArray && blueprintArray.length > 0) {
		return blueprintArray[0];
	}
	return null;
}


function findStackHeadVersionByName(stackName)
{
	//Under the covers this is using GSON under the covers
	// (https://github.com/google/gson)
        var stackArray = minion.$('$..stacks[?(@.name==\"' + stackName + '\")]');

	//there could be many stacks with this name we only need one of them 
	//as we are going to find the stack which is the head (most current) version
	if (stackArray && stackArray.length > 0) {

		//This returns the head version of this stack
		/*
			if you look at the minion.js file you will see a
			function of the form

			head : {
				get : function {

			This method get all the versions of the underlying asset (delegate)
			that minion is wrapping and calls its getAllVersion method and 
			iterates through these "stacks in our case" to find the one 
			with version attribute equal to 0.

			The IVersion interface is implemented by the delegate 
			underlying agility assset implementation which in our case is a 

			com.servicemesh.agility.internal.api.service.StackImpl
		*/	
		return stackArray[0].head;	
	}
        return null;
}

function findProjectByName(projectName)
{
        var projs = minion.projects;

	//We could use the GSON syntax to find this project
	//
	//for example, 
	//minion.$('$..projects[?(@.name=="BZ4")]')
	//
        for (var a = 0; a < projs.length; a++) {
                if (projs[a].name == projectName) {
			return projs[a];
                }
        }

	//we should log that the project was not found
        return null;
}

function findProjectIdByName(projectName)
{
        var proj = findProjectByName(projectName);
        if (proj) { 
		return proj.id; 
	} else { 
		return null; 
	}
}

/*

	This method creates blueprint with a single workload
	in the indicated project.  

	To do this it finds the stack (head version) by the passed
	in name stackName and then creates a workload object which
	contains this stack.

	The variables and other assets (except for firewall rules)
	that will apply to this workload and runtime template/instance 
	will be inherited from the project container.

*/
function createBlueprintSingleWorkload(blueprintName, stackName, projectName)
{
  try
  {
        var proj = findProjectByName(projectName);
        var stack = findStackHeadVersionByName(stackName);

        if (valIsDefined(proj) && valIsDefined(stack)) {

                //you have to create the blueprint first as it is the (design) container for the workload
                var blueprint = new minion.object.Blueprint({name : blueprintName, parent : proj});
                blueprint.save();

                //create the workload indicating its base stack.  We also indicate that its parent is the
		//blueprint we will be adding it to as an any order item (see next step)
                var workload = new minion.object.Workload({name : stackName, baseStack:stack, parent : blueprint});
                workload.save();

                //add the workload to the blueprint as an any order item
                var aoi = [workload];
                blueprint.anyOrderItems = aoi;
                //as the blueprint exists we do an update not a save
                blueprint.update();
		return;
        }
  }
  catch(e) {

  }
}

/*
	This is very inefficient as we create and destroy the 
	http client on each call.

	Also this method should be driven by configuration instead of
	hard coding the user id and password.
*/
function commonGetReturnResult(url, body)
{
  try
  {
	var AgilityUserAccount = "smadmin";
	var AgilityUserPassword = "M3sh@dmin\!";

	var request = {};
        request.headers = {"Content-Type":"application/xml"};

	if (!body) {
        	request.body = "";
	}
	else {
        	request.body = body;
	}

	var httpClient = minion.http.HttpClient({username:AgilityUserAccount, password:AgilityUserPassword});
	var response = httpClient.httpGet(url, request);

        minion.logger.info("response code: " + response.code);

        if (response.code > 300) {
                return null;
        }
        else {
                return response.data; 
        }
  }
  catch(e) {

  }
}

function commonPostReturnResult(url, body)
{
  try
  {
	var AgilityUserAccount = "smadmin";
	var AgilityUserPassword = "M3sh@dmin\!";

	var request = {};
        request.headers = {"Content-Type":"application/xml"};

	if (!body) {
        	request.body = "";
	}
	else {
        	request.body = body;
	}

	var httpClient = minion.http.HttpClient({username:AgilityUserAccount, password:AgilityUserPassword});
	var response = httpClient.httpPost(url, request);

        minion.logger.info("response code: " + response.code);

        if (response.code > 300) {
                return null;
        }
        else {
                return response.data; 
        }
  }
  catch(e) {

  }
}

function simpleWaitOnTask(taskId)
{
	return waitForTaskForCompletion(taskId, 10, 6);
}

function waitForTaskForCompletion(taskId, pollingIntervalInSeconds, maxNumberOfIntervals)
{
	var url = "https://"+ agilityIpAndPort + "/agility/api/current/task/" + taskId;

	var currentIntervals = 0;
	while (currentIntervals < maxNumberOfIntervals) {
	
		//you can go to your agility instance and type in the url 
		//to see the result we are parsing	
		var resultData = commonGetReturnResult(url);

		var complete = getDataUsingXPath(resultData, '//Task/completed/text()');
		if (complete == 'true') {


		}
                                                //do the status check
                                                var trueStatus = minion.xml.applyXPath(response.data,'//Task/status/text()');
                                                if (valIsDefined(trueStatus) && trueStatus.indexOf(status) >= 0) {


	
		var result = commonGetReturnResult(url);
		
//HERE	
		try {
			Thread.currentThread().sleep(pollingIntervalInSeconds*1000);
		}
		catch(e) {

		}
		currentIntervals++;
		
	}
}

/*
	We pull this out as a seperate method to give us a central place to
	talk about how Minion handles xpath.

	The xpath method depend upon the following function

	minion.XML.prototype.compileXPath = function(xpathExpression) {
  		var xPathfactory = javax.xml.xpath.XPathFactory.newInstance();
  		var xpath = xPathfactory.newXPath();
  		return xpath.compile(xpathExpression);
	};

	which is dependent upon the Java package javax.xml.xpath.XPathFactory

	NOTE: Other features of Minion like email are not based upon Java classes.
*/
function getDataUsingXPath(data, path)
{
	//There is also a applyXPathNodeset method if more than
	//one is to be returned we should use that version of the method
	return minion.xml.applyXPath(data, path);
}


/*
	This method deploys the blueprint which in our case
	results in a topology that contains a template which 
	contains a single instance.

	The REST call to deploy a blueprint is a GET.

	The GET call requires the id of the blueprint and the
	id of the project into which the blueprint will be deployed.
*/
function deployBlueprint(blueprintName, projectName, hostName)
{
 	var blueprintId = findBlueprintIdByName(blueprintName, projectName);
        var projectId = findProjectIdByName(projectName);

        var url = "https://" + agilityIpAndPort + "/agility/api/current/blueprint/" + blueprintId + "/deploy/" + projectId;

	//This execution is the same as clicking deploy in the GUI on the blueprint
	var resultData = commonGetReturnResult(url);

	var taskId = getDataUsingXPath(resultData, '//Task/id/text()');

HERE
	//This is the topology id of the topology that contains the template and instance 
	//which resulted from the deployed blueprint (workload).	

	var topologyId = getDataUsingXPath(resultData, '//Task/result/id/text()');

	return topologyId;
}

/*

	The rest calls to control Agility assets are in the AgilityRESTAPIguide.pdf

	You can also find them by looking at the REST interface code for the asset.

	For instance, for a topology the REST interface is defined in

	com.servicemesh.agility.internal.api.Topologies

	From this file we see the following paths for basic operations

 	@POST
        @Path("{id}/start")

	@POST
        @Path("{id}/stop")

	@POST
        @Path("{id}/release")

	Commands issued against the topology will also (save policy) apply
	to its children (templates/instances).
*/
function startTopology(topologyId)
{
	var url = "https://" + agilityIpAndPort + "/agility/api/current/topology/" + topologyId + "/start";
	var resultData = commonPutReturnResult(url);
	
	var taskId = getTaskIdFromResponse(resultData);

	var status = waitForTaskForCompletionGetStatus(taskId, 30 /*pollingIntervalInSeconds*/, 30 /*maxNumberOfIntervals*/);

	if (finalStatus) {


	}

function startTopology(topologyId)
{
        minion.logger.info('starting topology with topology id ' + topologyId);

        var httpClient = getAgilityHttpClient();
        var url = "https://" + config.agilityserveripandport + "/agility/api/current/topology/" + topologyId + "/start";

        var response = commonPost(httpClient, url);
        var ans = waitOnSpawnedTaskDefaultPeriodCheckStatusReturnResult(response, "Completed");


}


function stopTopology(topologyId)
{
	var url = "https://" + agilityIpAndPort + "/agility/api/current/topology/" + topologyId + "/stop";
	var resultData = commonPutReturnResult(url);

	var taskId = getTaskIdFromResponse(resultData);


}


function releaseTopology(topologyId)
{
	var url = "https://" + agilityIpAndPort + "/agility/api/current/topology/" + topologyId + "/release";


}

/*
	This method opens up a winrm client to interact with the Active Directory Server.  Obviously
	the parameters like userid should not be hard coded in production code.

*/
function getActiveDirectoryClient()
{
	var userid = "agil_svc";
	var password = "M3sh@dmin\!";
	var ADHostIp = "10.92.2.254";

	var client = new minion.remote.Client({publicKey: userid, privateKey: password, type:"winrm", host: ADHostIp});
	client.open();
	return client;
}

/*
	This method uses remote shell Minion objects
	to determine if a particular dns record exists in an active directory
	server.
*/
function ADRecordExists(hostName, adclient)
{
	//should test that adclient is not null and that it is open
	var res = adclient.exec("powershell","Get-ADComputer " + hostName);
	var result = res.stdout;

	//we should test for null in the result

	//We look for the word Dist (Distinguished Name) which will be returned from the
	//call if the AD record exists
	if (result.indexOf("Dist") > 0)  {
		return true;
	}
	else {
		return false;
	}
}

/*
	This method uses remote shell Minion objects
	to determine if a particular dns record exists in an active directory
	server.
*/
function dnsRecordExists(hostName, adclient)
{
	//should test that adclient is not null and that it is open
	var res = adclient.exec("powershell", "Get-DnsServerResourceRecord -Name " + hostName +
				" -ZoneName tenant01.hcs.cscehub.com | select {$_.recorddata | select -expandproperty ipv4address}");
	var result = res.stdout;

	if (result) {
		result = result.trim();

		//The actual call returns an ipv4 which we could test for but instead
		//we are just ensuring that a non-empty string is returned.
		//THIS IS WEAK
		//We could also use a Javascript regular expression to match the ip for the test
		if (result.length > 0) {
			return true;
		}
		else {
			return false;
		}
	}
	return false;
}

function dnsAndADRecordsExist()
{
	return dnsRecordExists(hostName) && ADRecordExists(hostName);
}

function dnsOrADRecordExists()
{
	return dnsRecordExists(hostName) || ADRecordExists(hostName);
}

/*
	Assets in Agility are linked together in a hierarcle nature.  
	Assets have parents which in turn parents.

	Minion has great convience methods that exploit this; for instance,	
	if you have an asset such as an instance (VM) you can look for an 
	asset property called "MyInfo" you can execute a method such as 
	the following (assuming you instance asset is called myinst):

	var assetProp = myinst.findAssetProperty("MyInfo")

	this method will look for the asset property in the instance
	and then the instance's parent (a template) and then its
	parent and so on.

	Our template has a hostname asset property which we need to set.

	**** Assume we run the following from the karaf shell:

	minion (Container) /Root > minion.projects

	and obtain

	Array size [7]:
   [0]   [delegate [Project]:[51]:[znBETesting]]
   [1]   [delegate [Project]:[17]:[CSC Agility Store Demo]]
   [2]   [delegate [Project]:[2]:[Agility Factory]]
   [3]   [delegate [Project]:[3]:[Agility Platform]]
   [4]   [delegate [Project]:[21]:[Project Hawkwood]]
   [5]   [delegate [Project]:[25]:[Project Freebird]]
   [6]   [delegate [Project]:[11]:[Store Items Factory]]

	This indicates there are 6 projects in our Agility instance.

	Assuming that under project[1] there is an environment 
	and under that a topology (that was deployed from a blueprint)
	and under that a template
	and under that an instance

	The expression 

	minion.projects[1].children[0].children[0].children[0].children[0]

	would get us a reference to the wrapper (by Minion instance).
	Again Minion wraps Agility objects. This means the Minion
	object has a property (_) which points at "references" the 
	underlying Agility asset (delegate) it wraps.

	To hostname is a property on the template (parent) of the instance
	so it would be set as

	minion.projects[1].children[0].children[0].children[0].hostnamePrefix = "name";

	or you could (for illustration purposes only)


	minion.projects[1].children[0].children[0].children[0].children[0].parent.hostnamePrefix = "name";

*/
function setHostNameOnTemplate(topologyId, projectName, hostName)
{
	//we need to find the topology in the context of a project
	var project = findProjectByName(projectName);

	//find the topology in this project (by using the instanceof operator and the topology id we are only looking
	//for our topology as a child which could be nested under many environments.  In this way we do not need
	//to know the runtime asset structure of the project.
	var topology = project.$('$..children[?(@ instanceof minion.object.Topology && @.id == ' + topologyId + ')]')[0];
	
	//template is the first child of the topology
	var template = topology.children[0];

	template.hostnamePrefix = hostName;
	
	//the template asset needs to be updated not saved as it already 
	//exists in the Agility mysql database.
	template.update();
}


function runTest()
{
	var blueprintName = "TestIt";
        var stackName = "SOE Windows (2008 R2 x64 v1.5.3s) Server";

        //we are deploying to a project not an environment such as DEV that
        //would be under a project
        var projectName = "CSC Agility Store Demo";

        var hostName = "burthost";

	createBlueprintSingleWorkload(blueprintName, stackName, projectName);

	var topologyId = deployBlueprint(blueprintName, projectName, hostName);

	setHostNameOnTemplate(topologyId, projectName, hostName);

	var testSucceed = true;
	startTopology(topologyId);
	if (!dnsAndADRecordsExist(hostName)) {
		testSucceed = false;
		print("dns and ad record does not exist after starting the instance this is an error");
	}

	stopTopology(topologyId);
	if (!dnsAndADRecordsExist(hostName)) {
		testSucceed = false;
		print("dns and ad record does not exist after stopping the instance this is an error");
	}

	releaseTopology(topologyId);
	if (dnsOrADRecordExists(hostName)) {
		testSucceed = false;
		print("dns or ad record exists and should not after releasing the instance this is an error");
	}

	deleteBlueprint(blueprintName);

	if (testSucceed) {
		print("The test was successful");
	}
	else {
		print("Test failed");
	}
}
